openapi: 3.0.4
info:
  title: Blood Donation Support System - OpenAPI 1.0
  version: v1
servers:
  - url: '/'
  - url: http://localhost:8080
  - url: https://be-t8i8.onrender.com
tags:
  - name: Users
    description: Operations about user
  - name: Bloods
    description: Operations about blood
  - name: Blood Units
    description: Operations about blood units
  - name: Donation Registrations
    description: Operations about donation registrations
  - name: Donation Processes
    description: Operations about donation processes
  - name: Donation - Health - Process
    description: Operations about Donation - Health - Process
  - name: Health Checks
    description: Operations about health checks
  - name: Request Registrations
    description: Operations about request registrations
  - name: Request Processes
    description: Operations about request processes
  - name: Request - Health - Process
    description: Operations about Request - Health - Process
  - name: Request Process Details
    description: Operations about request process details
  - name: Request Process Bloods
    description: Operations about request process bloods
  - name: Blogs
    description: Operations about blogs
paths:
  /api/users/login:
    post:
      tags:
        - Users
      summary: Login
      description: Login into system
      operationId: login
      requestBody:
        description: Information login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuthentication'

        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
  /api/users/register:
    post:
      tags:
        - Users
      summary: Register
      description: Register into system
      operationId: register
      requestBody:
        description: Information register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
        required: true
      responses:
        '200':
          description: Register Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuthentication'

        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
  /api/users/logout:
    post:
      tags:
        - Users
      summary: Logout
      description: Logout system
      operationId: Logout
      requestBody:
        description: Information Logout
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutBody'
        required: true
      responses:
        '200':
          description: Logout Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout success
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/users/refresh-token:
    post:
      tags:
        - Users
      summary: Refresh Token
      description: Refresh token when Access token expired
      operationId: Refresh Token
      requestBody:
        description: Information Refresh Token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutBody'
        required: true
      responses:
        '200':
          description: Refresh token success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuthentication'
        '401':
          description: UnAuthorization
  /api/users/me:
    get:
      tags:
        - Users
      summary: Profile
      description: Get user information
      operationId: profile
      responses:
        default:
          description: Get user information success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/users/update-me:
    patch:
      tags:
        - Users
      summary: Update Profile
      description: Update user information
      operationId: updateProfile
      requestBody:
        description: Information update profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeReqBody'
      responses:
        default:
          description: Update user information success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/users/change-password:
    post:
      tags:
        - Users
      summary: Change Password
      description: Change password
      operationId: changePassword
      requestBody:
        description: Information change password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordReqBody'
      responses:
        default:
          description: Change password success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuthentication'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/users/{citizen_id_number}:
    get:
      tags:
        - Users
      summary: Get user information by citizen id number for Staff or Admin
      description: Get user information by citizen id number for Staff or Admin
      operationId: information by citizen id
      responses:
        default:
          description: Get user information by citizen id number success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/users:
    get:
      tags:
        - Users
      summary: Get all user information for Staff or Admin
      description: Get all user information for Staff or Admin
      operationId: getAllInformation
      responses:
        default:
          description: Get all user information success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/bloods/blood-groups:
    get:
      tags:
        - Bloods
      summary: Get All Blood Groups
      description: Get all blood groups
      operationId: getAllBloodGroups
      responses:
        default:
          description: Get all blood groups success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BloodGroup'
        '404':
          description: Blood group not found
    post:
      tags:
        - Bloods
      summary: Create Blood Group
      description: Create a new blood group (only admin)
      operationId: createBloodGroup
      requestBody:
        description: Information create blood group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBloodGroupReqBody'
        required: true
      responses:
        '200':
          description: Create blood group success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BloodGroup'
        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/bloods/blood-components:
    get:
      tags:
        - Bloods
      summary: Get All Blood Components
      description: Get all blood components
      operationId: getAllBloodComponents
      responses:
        default:
          description: Get all blood components success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BloodComponent'
        '404':
          description: Blood component not found
    post:
      tags:
        - Bloods
      summary: Create Blood Component
      description: Create a new blood component (only admin)
      operationId: createBloodComponent
      requestBody:
        description: Information create blood component
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBloodComponentReqBody'
        required: true
      responses:
        '200':
          description: Create blood component success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blood component created successfully
        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/blood-units:
    get:
      tags:
        - Blood Units
      summary: Get All Blood Units for Staff or Admin
      description: Get All Blood Units for Staff or Admin
      operationId: getAllBloodUnitsForStaffOrAdmin
      responses:
        default:
          description: Get all blood units success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BloodUnits'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/blood-units/{id}:
    get:
      tags:
        - Blood Units
      summary: Get Blood Units by Donation Process Id
      description: Get Blood Units by Donation Process Id
      operationId: getBloodUnitsByDonationProcessId
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        default:
          description: Get blood units by donation process id success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BloodUnits'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    patch:
      tags:
        - Blood Units
      summary: Update Blood Units by Donation Process Id for Staff or Admin
      description: Blood Units by Donation Process Id for Staff or Admin
      operationId: updateBloodUnitsByProcessId
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Information update health check
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBloodUnitReqBody'
        required: true
      responses:
        default:
          description: Update health check success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BloodUnits'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/blood-units/{blood_group_id}/{blood_component_ids}:
    get:
      tags:
        - Blood Units
      summary: Get All Blood Units Relative
      description: Get blood units matching blood group and blood components
      operationId: getAllBloodUnitsRelative
      parameters:
        - name: blood_group_id
          in: path
          required: true
          schema:
            type: string
            format: MongoId

        - name: blood_component_ids
          in: path
          required: true
          style: simple # Comma-separated value
          explode: false # Important: keep as a single string
          schema:
            type: array
            items:
              type: string
              format: MongoId
      responses:
        '200':
          description: Blood units fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                $ref: '#/components/schemas/BloodUnits'
        '401':
          description: Unauthorized
      security:
        - BearerAuth: []
  /api/donations/donation-registrations:
    post:
      tags:
        - Donation Registrations
      summary: Create Donation Registration
      description: Create a new donation registration
      operationId: createDonationRegistration
      requestBody:
        description: Information create donation registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDonationRegistrationReqBody'
        required: true
      responses:
        '200':
          description: Create donation registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRegistration'
        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []

    get:
      tags:
        - Donation Registrations
      summary: Get All Donation Registrations for Staff or Admin
      description: Get all donation registrations for staff or admin
      operationId: getAllDonationRegistrations
      responses:
        default:
          description: Get all donation registrations success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DonationRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/donations/donation-registrations/user:
    get:
      tags:
        - Donation Registrations
      summary: Get Donation Registration by User ID Now
      description: Get donation registration by user id now
      operationId: getDonationRegistrationByUserId
      responses:
        default:
          description: Get donation registration by user id success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/donations/donation-registrations/{id}:
    get:
      tags:
        - Donation Registrations
      summary: Get Donation Registration By Id
      description: Get Donation Registration By Id
      operationId: getDonationRegistrationById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        default:
          description: Update donation registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []

    patch:
      tags:
        - Donation Registrations
      summary: Update Donation Registration By Id
      description: Update donation registration By Id
      operationId: updateDonationRegistration
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Information update donation registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDonationRegistrationReqBody'
        required: true
      responses:
        default:
          description: Update donation registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/donations/donation-processes:
    get:
      tags:
        - Donation Processes
      summary: Get All Donation Processes for Staff or Admin
      description: Get all donation processes for staff or admin
      operationId: getAllDonationProcesses
      parameters:
        - in: query
          name: is_separated
          required: false
          schema:
            type: boolean
          description: Filter by separation status (true/false)
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [Pending, Approved, Rejected]
          description: Filter by donation process status
      responses:
        '200':
          description: Get all donation processes success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DonationProcess'
        '401':
          description: Unauthorized
      security:
        - BearerAuth: []
  /api/donations/donation-processes/user:
    get:
      tags:
        - Donation Processes
      summary: Get Donation Processes by User ID Now
      description: Get donation processes by user id now
      operationId: getDonationProcessesByUserId
      responses:
        default:
          description: Get donation processes by user id success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/donations/donation-processes/{id}:
    get:
      tags:
        - Donation Processes
      summary: Get Donation Processes By Id
      description: Get Donation Processes By Id
      operationId: getDonationProcessesById
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      responses:
        default:
          description: Get donation processes success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    patch:
      tags:
        - Donation Processes
      summary: Update Donation Processes for Staff or Admin
      description: Update Donation Processes for Staff or Admin
      operationId: updateDonationProcesses
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      requestBody:
        description: Information update donation processes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonationProcessReqBody'
        required: true
      responses:
        default:
          description: Update donation processes success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/donations/donation-health-process/user:
    get:
      tags:
        - Donation - Health - Process
      summary: Get Donation - Health - Process By User Id
      description: Get Donation - Health - Process By User Id
      operationId: getDonationHealthProcessByUserId
      responses:
        default:
          description: Get donation processes success
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/donations/donation-health-process/{id}:
    get:
      tags:
        - Donation - Health - Process
      summary: Get Donation - Health - Process By Donation Id
      description: Get Donation - Health - Process By Donation Id
      operationId: getDonationHealthProcessByDonationId
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      responses:
        default:
          description: Get donation processes success
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/donations/donation-health-process/{id}/status:
    get:
      tags:
        - Donation - Health - Process
      summary: Get Status Donation - Health - Process By Donation Id
      description: Get Status Donation - Health - Process By Donation Id
      operationId: getStatusDonationHealthProcessByDonationId
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      responses:
        default:
          description: Get status donation processes success
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/health-checks/:
    get:
      tags:
        - Health Checks
      summary: Get All Health Checks for Admin or Staff
      description: Get All Health Checks for Admin or Staff
      operationId: getAllHealthCheckForAdminOrStaff
      responses:
        default:
          description: Get all health check success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthCheck'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/health-checks/user:
    get:
      tags:
        - Health Checks
      summary: Get All Health Checks for User now
      description: Get All Health Checks for User now
      operationId: getAllHealthCheck
      responses:
        default:
          description: Get all health check success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthCheck'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/health-checks/{id}:
    get:
      tags:
        - Health Checks
      summary: Get Health Check By Id for Staff or Admin
      description: Get Health Check By Id for Staff or Admin
      operationId: getHealthCheckById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        default:
          description: Update Health Check success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    patch:
      tags:
        - Health Checks
      summary: Update Health Check By Id for Staff or Admin
      description: Update Health Check By Id for Staff or Admin
      operationId: updateHealthCheck
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Information update Health Check
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHealthCheckReqBody'
        required: true
      responses:
        default:
          description: Update Health Check success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-registrations:
    post:
      tags:
        - Request Registrations
      summary: Create Request Registration
      description: Create a new request registration
      operationId: createRequestRegistration
      requestBody:
        description: Information create request registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestRegistrationReqBody'
        required: true
      responses:
        '200':
          description: Create donation registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestRegistration'
        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []

    get:
      tags:
        - Request Registrations
      summary: Get All Request Registrations for Staff or Admin
      description: G Get All Request Registrations for Staff or Admin
      operationId: getAllRequestRegistrations
      responses:
        default:
          description: Get all request registrations success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-registrations/user:
    get:
      tags:
        - Request Registrations
      summary: Get Request Registration by User ID Now
      description: Get Request Registration by User ID Now
      operationId: getRequestRegistrationByUserId
      responses:
        default:
          description: Get request registration by user id success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-registrations/{id}:
    get:
      tags:
        - Request Registrations
      summary: Get Request Registrations By Id
      description: Get Request Registrations By Id
      operationId: getRequestRegistrationById
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      responses:
        default:
          description: Get request registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    patch:
      tags:
        - Request Registrations
      summary: Update Request Registrations By Id for Staff or Admin
      description: Update Request Registrations By Id for Staff or Admin
      operationId: updateRequestRegistration
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      requestBody:
        description: Information update donation processes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRegistrationReqBody'
        required: true
      responses:
        default:
          description: Update donation processes success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-processes:
    get:
      tags:
        - Request Processes
      summary: Get All Request Processes for Staff or Admin
      description: Get All Request Processes for Staff or Admin
      operationId: getAllRequestProcesses
      responses:
        default:
          description: Get all request processes success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-processes/user:
    get:
      tags:
        - Request Processes
      summary: Get Request Processes by User ID Now
      description: Get Request Processes by User ID Now
      operationId: getRequestProcessesByUserId
      responses:
        default:
          description: Get request process by user id success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-processes/{id}:
    get:
      tags:
        - Request Processes
      summary: Get Request Processes By Id
      description: Get Request Processes By Id
      operationId: getRequestProcessesById
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      responses:
        default:
          description: Get request process success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    patch:
      tags:
        - Request Processes
      summary: Update Request Processes By Id for Staff or Admin
      description: Update Request Processes By Id for Staff or Admin
      operationId: updateRequestProcessesById
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      requestBody:
        description: Information update request processes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequestProcessReqBody'
        required: true
      responses:
        default:
          description: Update request processes success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-health-process/user:
    get:
      tags:
        - Request - Health - Process
      summary: Get Request - Health - Process By User Id
      description: Get Request - Health - Process By User Id
      operationId: getRequestHealthProcessByUserId
      responses:
        default:
          description: Get donation processes success
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-health-process/{id}:
    get:
      tags:
        - Request - Health - Process
      summary: Get Request - Health - Process By Request Id
      description: Get Request - Health - Process By Request Id
      operationId: getRequestHealthProcessByRequestId
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      responses:
        default:
          description: Get request processes success
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-health-process/{id}/status:
    get:
      tags:
        - Request - Health - Process
      summary: Get Status Request - Health - Process By Request Id
      description: Get Status Request - Health - Process By Request Id
      operationId: getStatusRequestHealthProcessByRequestId
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      responses:
        default:
          description: Get status request processes success
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-process-details/{id}:
    get:
      tags:
        - Request Process Details
      summary: Get Request Process Details By Process Id for Staff or Admin
      description: Get Request Process Details By Process Id for Staff or Admin
      operationId: getRequestProcessDetailsByProcessId
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      responses:
        default:
          description: Get request process detail success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestProcessDetail'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    patch:
      tags:
        - Request Process Details
      summary: Update Request Process Details By Process Id for Staff or Admin
      description: Update Request Process Details By Process Id for Staff or Admin
      operationId: updateRequestProcessDetailsByProcessId
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      requestBody:
        description: Information update request process detail
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateRequestProcessDetailReqBody'
        required: true
      responses:
        default:
          description: Update request process detail success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestProcessDetail'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/requests/request-process-bloods/{id}:
    get:
      tags:
        - Request Process Bloods
      summary: Get Request Process Bloods By Process Id for Staff or Admin
      description: Get Request Process Bloods By Process Id for Staff or Admin
      operationId: getRequestProcessBloodsByProcessId
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      responses:
        default:
          description: Get request process blood success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestProcessBlood'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    patch:
      tags:
        - Request Process Bloods
      summary: Update Request Process Bloods By Process Id for Staff or Admin
      description: Update Request Process Bloods By Process Id for Staff or Admin
      operationId: updateRequestProcessBloodsByProcessId
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      requestBody:
        description: Information update request process blood
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateRequestProcessBloodReqBody'
        required: true
      responses:
        default:
          description: Update request process blood success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestProcessBlood'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/blogs:
    get:
      tags:
        - Blogs
      summary: Get All Blogs
      description: Get all blogs
      operationId: getAllBlogs
      responses:
        default:
          description: Get all blogs success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []

    post:
      tags:
        - Blogs
      summary: Create Blog (only admin)
      description: Create a new blog (only admin)
      operationId: createBlog
      requestBody:
        description: Information create blog
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlogReqBody'
        required: true
      responses:
        default:
          description: Create blog success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /api/blogs/{id}:
    get:
      tags:
        - Blogs
      summary: Get Blog by ID
      description: Get blog by id
      operationId: getBlogById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        default:
          description: Get blog by id success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    patch:
      tags:
        - Blogs
      summary: Update Blog (only admin)
      description: Update blog (only admin)
      operationId: updateBlog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Information update blog
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBlogReqBody'
        required: true
      responses:
        default:
          description: Update blog success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    delete:
      tags:
        - Blogs
      summary: Delete Blog (only admin)
      description: Delete blog (only admin)
      operationId: deleteBlog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        default:
          description: Delete blog success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
components:
  schemas:
    RegisterBody:
      type: object
      properties:
        citizen_id_number:
          type: string
          example: 123456789123
        phone:
          type: string
          example: 0987654321
        email:
          type: string
          example: dustintsan1@gmail.com
        password:
          type: string
          example: Duc@123123
        confirm_password:
          type: string
          example: Duc@123123
        full_name:
          type: string
          example: Duc Nguyen
        date_of_birth:
          type: string
          example: 2025-05-21T17:48:12.171Z
        gender:
          $ref: '#/components/schemas/UserGender'
        weight:
          type: number
          example: 0
        location:
          type: string
          example: ''
        avatar_url:
          type: string
          example: ''
        blood_group_id:
          type: string
          example: ''
    ChangePasswordReqBody:
      type: object
      properties:
        old_password:
          type: string
          example: Duc@123123
        password:
          type: string
          example: Duc@123123
        confirm_password:
          type: string
          example: Duc@123123
    UpdateMeReqBody:
      type: object
      properties:
        full_name:
          type: string
          example: Duc Nguyen
        date_of_birth:
          type: string
          example: 2025-05-21T17:48:12.171Z
        gender:
          $ref: '#/components/schemas/UserGender'
        weight:
          type: number
          example: 0
        avatar_url:
          type: string
          example: ''
        location:
          type: string
          example: ''
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
    LoginBody:
      type: object
      properties:
        phone:
          type: string
          example: 0987654321
        password:
          type: string
          example: Duc@123123
    LogoutBody:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjgyZjdiZTM1N2FlNzVhMGI5NmI3YWM1IiwidG9rZW5fdHlwZSI6MCwicm9sZSI6IlN0YWZmIiwiaWF0IjoxNzQ3OTQ0ODk0LCJleHAiOjE3NDc5NDU3OTR9.WpOyu0HlgqU2fg7ElIakw-JVM5TWIUaVb-syRrgovOI
    SuccessAuthentication:
      type: object
      properties:
        message:
          type: string
          example: success
        result:
          type: object
          properties:
            access_token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjgyZjdiZTM1N2FlNzVhMGI5NmI3YWM1IiwidG9rZW5fdHlwZSI6MCwicm9sZSI6IlN0YWZmIiwiaWF0IjoxNzQ3OTQ0ODk0LCJleHAiOjE3NDc5NDU3OTR9.WpOyu0HlgqU2fg7ElIakw-JVM5TWIUaVb-syRrgovOI
            refresh_token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjgyZjdiZTM1N2FlNzVhMGI5NmI3YWM1IiwidG9rZW5fdHlwZSI6MCwicm9sZSI6IlN0YWZmIiwiaWF0IjoxNzQ3OTQ0ODk0LCJleHAiOjE3NDc5NDU3OTR9.WpOyu0HlgqU2fg7ElIakw-JVM5TWIUaVb-syRrgovOI
    User:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        full_name:
          type: string
          example: Dustin Tsan
        email:
          type: string
          example: dustintsan1@gmail.com
        date_of_birth:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        role:
          $ref: '#/components/schemas/UserRole'
        gender:
          $ref: '#/components/schemas/UserGender'
        blood_group_id:
          type: string
          nullable: true
          example: null
        number_of_donation:
          type: integer
          example: 0
        number_of_request:
          type: integer
          example: 0
        weight:
          type: number
          example: 0
        location:
          type: string
          example: ''
        phone:
          type: string
          example: ''
        avatar_url:
          type: string
          example: ''
        created_at:
          type: string
          format: date-time
          example: 2025-05-22T18:17:35.277Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-22T18:17:35.277Z
    UserGender:
      type: string
      enum: [Other, Male, Female]
      example: Male
    UserRole:
      type: string
      enum: [Admin, Staff, Customer]
      example: Admin
    DonationRegistrationStatus:
      type: string
      enum: [Pending, Approved, Rejected, Checked In]
      example: Pending
    DonationProcessStatus:
      type: string
      enum: [Pending, Approved, Rejected]
      example: Pending
    DonationType:
      type: string
      enum:
        - Whole Blood # Hiến máu toàn phần
        - Platelets # Hiến tiểu cầu
        - Plasma # Hiến huyết tương
        - Red Blood Cells # Hiến hồng cầu kép
        - Platelets - Plasma # Hiến tiểu cầu + huyết tương
        - Plasma - Red Blood Cells # Hiến huyết tương + hồng cầu
        - Platelets - Red Blood Cells # Hiến tiểu cầu + hồng cầu
      example: Whole Blood
    RequestType:
      type: string
      enum:
        - Whole Blood # Hiến máu toàn phần
        - Platelets # Hiến tiểu cầu
        - Plasma # Hiến huyết tương
        - Red Blood Cells # Hiến hồng cầu kép
        - Platelets - Plasma # Hiến tiểu cầu + huyết tương
        - Plasma - Red Blood Cells # Hiến huyết tương + hồng cầu
        - Platelets - Red Blood Cells # Hiến tiểu cầu + hồng cầu
      example: Whole Blood
    BloodGroupEnum:
      type: string
      enum: [A+, A-, B+, B-, AB+, AB-, O+, O-]
      example: A+
    BloodComponentEnum:
      type: string
      enum: [Whole Blood, Red Blood Cells, Plasma, Platelets]
      example: Whole Blood
    BloodGroup:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        name:
          $ref: '#/components/schemas/BloodGroupEnum'
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    BloodComponent:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        name:
          $ref: '#/components/schemas/BloodComponentEnum'
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    BloodUnitsStatus:
      type: string
      enum: [Available, Reserved, Used, Expired, Damaged]
      example:
    BloodUnits:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        donation_process_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_process_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        volume:
          type: number
          example: 0
        status:
          $ref: '#/components/schemas/BloodUnitsStatus'
        update_by:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        expired_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    UpdateBloodUnitReqBody:
      type: object
      properties:
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        note:
          type: string
        volume:
          type: number
          example: 0
        storage_temperature:
          type: number
          example: 0
        status:
          $ref: '#/components/schemas/BloodUnitsStatus'
    CreateBloodGroupReqBody:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/BloodGroupEnum'
    CreateBloodComponentReqBody:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/BloodComponentEnum'
    CreateDonationRegistrationReqBody:
      type: object
      properties:
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        start_date_donation:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        donation_type:
          $ref: '#/components/schemas/DonationType'
    DonationRegistration:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        user_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_ids:
          type: array
          format: MongoId
          example: [682f6a3fdb3fb589d23e7654, 682f6a3fdb3fb589d23e7654]
        donation_type:
          $ref: '#/components/schemas/DonationType'
        start_date_donation:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        status:
          $ref: '#/components/schemas/DonationRegistrationStatus'
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    UpdateDonationRegistrationReqBody:
      type: object
      properties:
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        donation_type:
          $ref: '#/components/schemas/DonationType'
        start_date_donation:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        status:
          $ref: '#/components/schemas/DonationRegistrationStatus'
    DonationProcess:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        donation_registration_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        user_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        health_check_id:
          type: string
          format: MongoId
          example: 6856be913ee8cc9717842b3f
        blood_group_id:
          type: string
          format: MongoId
          example: 6835ee86cb638a298130ff63
        blood_group_name:
          type: string
          example: 'B+'
        username:
          type: string
          example: 'Thao Nguyen'
        donation_date:
          type: string
          format: date-time
          example: 2025-06-21T14:15:45.866Z
        volume_collected:
          type: number
          example: 0
        status:
          $ref: '#/components/schemas/DonationProcessStatus'
        is_separated:
          type: boolean
          example: false
        description:
          type: string
          example: ''
        created_at:
          type: string
          format: date-time
          example: 2025-06-21T14:15:45.866Z
        updated_at:
          type: string
          format: date-time
          example: 2025-06-21T14:15:45.866Z
    DonationProcessReqBody:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DonationProcessStatus'
        description:
          type: string
          example: ''
        donation_date:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        volume_collected:
          type: number
          example: 0
    UpdateStatusDonationProcessReqBody:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DonationProcessStatus'
        volume_collected:
          type: number
          example: 0
        description:
          type: string
          example: ''
        donation_date:
          type: string
          format: date-time
          example: 2025-06-21T14:15:45.866Z
    HealthCheckStatus:
      type: string
      enum: [Pending, Approved, Rejected]
      example: Pending
    UpdateHealthCheckReqBody:
      type: object
      properties:
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        donation_type:
          $ref: '#/components/schemas/DonationType'
        request_type:
          $ref: '#/components/schemas/RequestType'
        weight:
          type: number
          example: 0
        temperature:
          type: number
          example: 0
        heart_rate:
          type: number
          example: 0
        diastolic_blood_pressure:
          type: number
          example: 0
        systolic_blood_pressure:
          type: number
          example: 0
        hemoglobin:
          type: number
          example: 0
        underlying_health_conditions:
          type: array
          items:
            $ref: '#/components/schemas/UnderlyingHealthConditionsEnum'
        description:
          type: string
          example: ''
        status:
          $ref: '#/components/schemas/HealthCheckStatus'
    UnderlyingHealthConditionsEnum:
      type: string
      enum: [Diabetes, Hypertension, HeartDisease, Other]
      example: Diabetes
    HealthCheck:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        user_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_ids:
          type: array
          format: MongoId
          example: [682f6a3fdb3fb589d23e7654, 682f6a3fdb3fb589d23e7654]
        donation_registration_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        donation_process_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        donation_type:
          $ref: '#/components/schemas/DonationType'
        request_registration_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_process_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_type:
          $ref: '#/components/schemas/RequestType'
        weight:
          type: number
          example: 0
        temperature:
          type: number
          example: 0
        heart_rate:
          type: number
          example: 0
        diastolic_blood_pressure:
          type: number
          example: 0
        systolic_blood_pressure:
          type: number
          example: 0
        hemoglobin:
          type: number
          example: 0
        underlying_health_conditions:
          type: array
          items:
            $ref: '#/components/schemas/UnderlyingHealthConditionsEnum'
        description:
          type: string
          example: ''
        status:
          $ref: '#/components/schemas/HealthCheckStatus'
        updated_by:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    RequestRegistrationStatus:
      type: string
      enum: [Pending, Approved, Rejected]
      example: Pending
    CreateRequestRegistrationReqBody:
      type: object
      properties:
        blood_group_id:
          type: string
          format: MongoId
        blood_component_id:
          type: string
          format: MongoId
        receive_date_request:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        citizen_id_number:
          type: string
          example: 123123123123
        is_emergency:
          type: boolean
          example: true
        full_name:
          type: string
        phone:
          type: string
        image:
          type: string
        note:
          type: string
    RequestRegistration:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        user_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_process_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        health_check_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        receive_date_request:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        status:
          $ref: '#/components/schemas/RequestRegistrationStatus'
        is_emergency:
          type: boolean
          example: true
        updated_by:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        note:
          type: string
        image:
          type: string
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    RequestRegistrationReqBody:
      type: object
      properties:
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        image:
          type: string
        is_emergency:
          type: boolean
          example: true
        receive_date_request:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    RequestProcessStatus:
      type: string
      enum: [Pending, Approved, Rejected]
      example: Pending
    RequestProcess:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        user_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_ids:
          type: array
          format: MongoId
          example: [682f6a3fdb3fb589d23e7654, 682f6a3fdb3fb589d23e7654]
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_registration_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        health_check_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_date:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        status:
          $ref: '#/components/schemas/RequestProcessStatus'
        description:
          type: string
        is_emergency:
          type: boolean
          example: true
        updated_by:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        image:
          type: string
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    UpdateRequestProcessReqBody:
      type: object
      properties:
        blood_component_ids:
          type: array
          format: MongoId
          example: [682f6a3fdb3fb589d23e7654, 682f6a3fdb3fb589d23e7654]
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_date:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        status:
          $ref: '#/components/schemas/RequestProcessStatus'
        description:
          type: string
        is_emergency:
          type: boolean
          example: true
    RequestProcessDetailStatus:
      type: string
      enum: [Pending, Matched]
      example: Pending
    UpdateRequestProcessDetailReqBody:
      type: object
      properties:
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        status:
          $ref: '#/components/schemas/RequestProcessDetailStatus'
        volume_required:
          type: number
          example: 100
    RequestProcessDetail:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_process_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        volume_required:
          type: number
          example: 100
        status:
          $ref: '#/components/schemas/RequestProcessDetailStatus'
        updated_by:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    RequestProcessBloodStatus:
      type: string
      enum: [Pending, Selected, Canceled]
      example: Pending
    RequestProcessBlood:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_process_detail_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        request_process_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_unit_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        volume:
          type: number
          example: 100
        status:
          $ref: '#/components/schemas/RequestProcessBloodStatus'
        updated_by:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    UpdateRequestProcessBloodReqBody:
      type: object
      properties:
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        status:
          $ref: '#/components/schemas/RequestProcessBloodStatus'
    Blog:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        title:
          type: string
          example: ''
        content:
          type: string
          example: ''
        author:
          type: string
          example: ''
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        image:
          type: string
          example: 'link image'
    CreateBlogReqBody:
      type: object
      properties:
        title:
          type: string
          example: ''
        content:
          type: string
          example: ''
        image:
          type: string
          example: 'link image'
        author:
          type: string
          example: ''
    UpdateBlogReqBody:
      type: object
      properties:
        title:
          type: string
          example: ''
        content:
          type: string
          example: ''
        image:
          type: string
          example: 'link image'
        author:
          type: string
          example: ''

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
