openapi: 3.0.4
info:
  title: Blood Donation Support System - OpenAPI 1.0
  version: v1
servers:
  - url: http://localhost:8080
  - url: '/'
  - url: https://be-t8i8.onrender.com
tags:
  - name: Users
    description: Operations about user
  - name: Bloods
    description: Operations about blood
  - name: Donation Registrations
    description: Operations about donation registrations
  - name: Donation Request Processes
    description: Operations about donation request processes
  - name: Blogs
    description: Operations about blogs
paths:
  /users/login:
    post:
      tags:
        - Users
      summary: Login
      description: Login into system
      operationId: login
      requestBody:
        description: Information login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuthentication'

        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
  /users/register:
    post:
      tags:
        - Users
      summary: Register
      description: Register into system
      operationId: register
      requestBody:
        description: Information register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
        required: true
      responses:
        '200':
          description: Register Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuthentication'

        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
  /users/logout:
    post:
      tags:
        - Users
      summary: Logout
      description: Logout system
      operationId: Logout
      requestBody:
        description: Information Logout
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutBody'
        required: true
      responses:
        '200':
          description: Logout Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout success
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /users/refresh-token:
    post:
      tags:
        - Users
      summary: Refresh Token
      description: Refresh token when Access token expired
      operationId: Refresh Token
      requestBody:
        description: Information Refresh Token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutBody'
        required: true
      responses:
        '200':
          description: Refresh token success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuthentication'
        '401':
          description: UnAuthorization
  /users/me:
    get:
      tags:
        - Users
      summary: Profile
      description: Get user information
      operationId: profile
      responses:
        default:
          description: Get user information success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /users/update-me:
    patch:
      tags:
        - Users
      summary: Update Profile
      description: Update user information
      operationId: updateProfile
      requestBody:
        description: Information update profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeBody'
      responses:
        default:
          description: Update user information success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /users/change-password:
    post:
      tags:
        - Users
      summary: Change Password
      description: Change password
      operationId: changePassword
      requestBody:
        description: Information change password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
      responses:
        default:
          description: Change password success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuthentication'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /bloods/blood-groups:
    get:
      tags:
        - Bloods
      summary: Get All Blood Groups
      description: Get all blood groups
      operationId: getAllBloodGroups
      responses:
        default:
          description: Get all blood groups success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BloodGroup'
        '404':
          description: Blood group not found
    post:
      tags:
        - Bloods
      summary: Create Blood Group
      description: Create a new blood group (only admin)
      operationId: createBloodGroup
      requestBody:
        description: Information create blood group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBloodGroupBody'
        required: true
      responses:
        '200':
          description: Create blood group success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BloodGroup'
        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /bloods/blood-components:
    get:
      tags:
        - Bloods
      summary: Get All Blood Components
      description: Get all blood components
      operationId: getAllBloodComponents
      responses:
        default:
          description: Get all blood components success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BloodComponent'
        '404':
          description: Blood component not found
    post:
      tags:
        - Bloods
      summary: Create Blood Component
      description: Create a new blood component (only admin)
      operationId: createBloodComponent
      requestBody:
        description: Information create blood component
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBloodComponentBody'
        required: true
      responses:
        '200':
          description: Create blood component success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blood component created successfully
        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /donations/donation-registrations:
    post:
      tags:
        - Donation Registrations
      summary: Create Donation Registration
      description: Create a new donation registration
      operationId: createDonationRegistration
      requestBody:
        description: Information create donation registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDonationRegistrationBody'
        required: true
      responses:
        '200':
          description: Create donation registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRegistration'
        '422':
          description: Invalid Input
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []

    get:
      tags:
        - Donation Registrations
      summary: Get All Donation Registrations for Staff or Admin
      description: Get all donation registrations for staff or admin
      operationId: getAllDonationRegistrations
      responses:
        default:
          description: Get all donation registrations success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DonationRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /donations/donation-registrations/{user_id}:
    get:
      tags:
        - Donation Registrations
      summary: Get Donation Registration by User ID
      description: Get donation registration by user id
      operationId: getDonationRegistrationByUserId
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        default:
          description: Get donation registration by user id success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /donations/donation-registrations/{id}/status:
    patch:
      tags:
        - Donation Registrations
      summary: Update Status Donation Registration
      description: Update status donation registration
      operationId: updateStatusDonationRegistration
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Information update status donation registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusDonationRegistrationReqBody'
        required: true
      responses:
        default:
          description: Update status donation registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /donations/donation-registrations/{id}:
    patch:
      tags:
        - Donation Registrations
      summary: Update Donation Registration
      description: Update donation registration
      operationId: updateDonationRegistration
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Information update donation registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDonationRegistrationReqBody'
        required: true
      responses:
        default:
          description: Update donation registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRegistration'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /donations/donation-request-processes:
    get:
      tags:
        - Donation Request Processes
      summary: Get All Donation Request Processes for Staff or Admin
      description: Get all donation request processes for staff or admin
      operationId: getAllDonationRequestProcesses
      responses:
        default:
          description: Get all donation request processes success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DonationRequestProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /donations/donation-request-processes/{user_id}:
    get:
      tags:
        - Donation Request Processes
      summary: Get Donation Request Processes by User ID
      description: Get donation request processes by user id
      operationId: getDonationRequestProcessesByUserId
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        default:
          description: Get donation request processes by user id success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRequestProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /donations/donation-request-processes/{id}/status:
    patch:
      tags:
        - Donation Request Processes
      summary: Update Status Donation Request Processes
      description: Update status donation request processes
      operationId: updateStatusDonationRequestProcesses
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Information update status donation request processes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusDonationRequestProcessBody'
        required: true
      responses:
        default:
          description: Update status donation request processes success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRequestProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /donations/donation-request-processes/{id}:
    patch:
      tags:
        - Donation Request Processes
      summary: Update Donation Request Processes
      description: Update donation request processes
      operationId: updateDonationRequestProcesses
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: MongoId
          required: true
      requestBody:
        description: Information update donation request processes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DonationRequestProcessReqBody'
        required: true
      responses:
        default:
          description: Update donation request processes success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonationRequestProcess'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /blogs:
    get:
      tags:
        - Blogs
      summary: Get All Blogs
      description: Get all blogs
      operationId: getAllBlogs
      responses:
        default:
          description: Get all blogs success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []

    post:
      tags:
        - Blogs
      summary: Create Blog (only admin)
      description: Create a new blog (only admin)
      operationId: createBlog
      requestBody:
        description: Information create blog
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlogReqBody'
        required: true
      responses:
        default:
          description: Create blog success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
  /blogs/{id}:
    get:
      tags:
        - Blogs
      summary: Get Blog by ID
      description: Get blog by id
      operationId: getBlogById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        default:
          description: Get blog by id success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    patch:
      tags:
        - Blogs
      summary: Update Blog (only admin)
      description: Update blog (only admin)
      operationId: updateBlog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Information update blog
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBlogReqBody'
        required: true
      responses:
        default:
          description: Update blog success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
    delete:
      tags:
        - Blogs
      summary: Delete Blog (only admin)
      description: Delete blog (only admin)
      operationId: deleteBlog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        default:
          description: Delete blog success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: UnAuthorization
      security:
        - BearerAuth: []
components:
  schemas:
    RegisterBody:
      type: object
      properties:
        phone:
          type: string
          example: 0987654321
        email:
          type: string
          example: dustintsan1@gmail.com
        password:
          type: string
          example: Duc@123123
        confirm_password:
          type: string
          example: Duc@123123
        full_name:
          type: string
          example: Duc Nguyen
        date_of_birth:
          type: string
          example: 2025-05-21T17:48:12.171Z
        role:
          $ref: '#/components/schemas/UserRole'
        gender:
          $ref: '#/components/schemas/UserGender'
        weight:
          type: number
          example: 0
        location:
          type: string
          example: ''
        avatar_url:
          type: string
          example: ''
        blood_group_id:
          type: string
          example: ''
        number_of_donation:
          type: integer
          example: 0
        number_of_request:
          type: integer
          example: 0
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
    ChangePasswordBody:
      type: object
      properties:
        old_password:
          type: string
          example: Duc@123123
        password:
          type: string
          example: Duc@123123
        confirm_password:
          type: string
          example: Duc@123123
    UpdateMeBody:
      type: object
      properties:
        full_name:
          type: string
          example: Duc Nguyen
        date_of_birth:
          type: string
          example: 2025-05-21T17:48:12.171Z
        gender:
          $ref: '#/components/schemas/UserGender'
        weight:
          type: number
          example: 0
        avatar_url:
          type: string
          example: ''
        location:
          type: string
          example: ''
    LoginBody:
      type: object
      properties:
        phone:
          type: string
          example: 0987654321
        password:
          type: string
          example: Duc@123123
    LogoutBody:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjgyZjdiZTM1N2FlNzVhMGI5NmI3YWM1IiwidG9rZW5fdHlwZSI6MCwicm9sZSI6IlN0YWZmIiwiaWF0IjoxNzQ3OTQ0ODk0LCJleHAiOjE3NDc5NDU3OTR9.WpOyu0HlgqU2fg7ElIakw-JVM5TWIUaVb-syRrgovOI
    SuccessAuthentication:
      type: object
      properties:
        message:
          type: string
          example: success
        result:
          type: object
          properties:
            access_token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjgyZjdiZTM1N2FlNzVhMGI5NmI3YWM1IiwidG9rZW5fdHlwZSI6MCwicm9sZSI6IlN0YWZmIiwiaWF0IjoxNzQ3OTQ0ODk0LCJleHAiOjE3NDc5NDU3OTR9.WpOyu0HlgqU2fg7ElIakw-JVM5TWIUaVb-syRrgovOI
            refresh_token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjgyZjdiZTM1N2FlNzVhMGI5NmI3YWM1IiwidG9rZW5fdHlwZSI6MCwicm9sZSI6IlN0YWZmIiwiaWF0IjoxNzQ3OTQ0ODk0LCJleHAiOjE3NDc5NDU3OTR9.WpOyu0HlgqU2fg7ElIakw-JVM5TWIUaVb-syRrgovOI
    User:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        full_name:
          type: string
          example: Dustin Tsan
        email:
          type: string
          example: dustintsan1@gmail.com
        date_of_birth:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        role:
          $ref: '#/components/schemas/UserRole'
        gender:
          $ref: '#/components/schemas/UserGender'
        blood_group_id:
          type: string
          nullable: true
          example: null
        number_of_donation:
          type: integer
          example: 0
        number_of_request:
          type: integer
          example: 0
        weight:
          type: number
          example: 0
        location:
          type: string
          example: ''
        phone:
          type: string
          example: ''
        avatar_url:
          type: string
          example: ''
        created_at:
          type: string
          format: date-time
          example: 2025-05-22T18:17:35.277Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-22T18:17:35.277Z
    UserGender:
      type: string
      enum: [Other, Male, Female]
      example: Male
    UserRole:
      type: string
      enum: [Admin, Staff, Customer]
      example: Admin
    DonationRegistrationStatus:
      type: string
      enum: [Pending, Approved, Rejected]
      example: Pending
    DonationProcessStatus:
      type: string
      enum: [Pending, Approved, Rejected]
      example: Pending
    BloodGroupEnum:
      type: string
      enum: [A+, A-, B+, B-, AB+, AB-, O+, O-]
      example: A+
    BloodComponentEnum:
      type: string
      enum: [Whole Blood, Red Blood Cells, Plasma, Platelets]
      example: Whole Blood
    BloodGroup:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        name:
          $ref: '#/components/schemas/BloodGroupEnum'
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    BloodComponent:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        name:
          $ref: '#/components/schemas/BloodComponentEnum'
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    CreateBloodGroupBody:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/BloodGroupEnum'
    CreateBloodComponentBody:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/BloodComponentEnum'
    CreateDonationRegistrationBody:
      type: object
      properties:
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        start_date_donation:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        status:
          $ref: '#/components/schemas/DonationRegistrationStatus'
    DonationRegistration:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        user_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        start_date_donation:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        status:
          $ref: '#/components/schemas/DonationRegistrationStatus'
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    UpdateStatusDonationRegistrationReqBody:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DonationRegistrationStatus'
    UpdateDonationRegistrationReqBody:
      type: object
      properties:
        blood_group_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        blood_component_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        start_date_donation:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
    DonationRequestProcess:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        donation_registration_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        user_id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        donation_date:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        volume_collected:
          type: number
          example: 0
        status:
          $ref: '#/components/schemas/DonationProcessStatus'
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        description:
          type: string
          example: ''
    DonationRequestProcessReqBody:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DonationProcessStatus'
        description:
          type: string
          example: ''
        donation_date:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        volume_collected:
          type: number
          example: 0
    UpdateStatusDonationRequestProcessBody:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DonationProcessStatus'
    Blog:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 682f6a3fdb3fb589d23e7654
        title:
          type: string
          example: ''
        content:
          type: string
          example: ''
        author:
          type: string
          example: ''
        created_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        updated_at:
          type: string
          format: date-time
          example: 2025-05-21T17:48:12.171Z
        image:
          type: string
          example: 'link image'
    CreateBlogReqBody:
      type: object
      properties:
        title:
          type: string
          example: ''
        content:
          type: string
          example: ''
        image:
          type: string
          example: 'link image'
    UpdateBlogReqBody:
      type: object
      properties:
        title:
          type: string
          example: ''
        content:
          type: string
          example: ''
        image:
          type: string
          example: 'link image'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
