export const USER_MESSAGES = {
  VALIDATION_ERROR: 'Validation error',
  NAME_IS_REQUIRED: 'Name is required',
  NAME_MUST_BE_A_STRING: 'Name must be a string',
  NAME_LENGTH_MUST_BE_FROM_1_TO_100: 'Name length must be from 1 to 100',
  PHONE_IS_REQUIRED: 'Phone is required',
  PHONE_ALREADY_EXISTS: 'Phone already exists',
  PHONE_IS_WRONG_FORMAT: 'Phone is wrong format',
  PHONE_MUST_BE_A_STRING: 'Phone must be a string',
  EMAIL_ALREADY_EXISTS: 'Email already exists',
  EMAIL_IS_REQUIRED: 'Email is required',
  EMAIL_IS_INVALID: 'Email is invalid',
  PASSWORD_IS_REQUIRED: 'Password is required',
  PASSWORD_MUST_BE_A_STRING: 'Password must be a string',
  PASSWORD_LENGTH_MUST_BE_FROM_6_TO_50: 'Password length must be from 6 to 50',
  PASSWORD_MUST_BE_STRONG:
    'Password must be 6-50 characters long and contain at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 symbol',
  CONFIRM_PASSWORD_IS_REQUIRED: 'Confirm password is required',
  CONFIRM_PASSWORD_MUST_BE_A_STRING: 'Confirm password must be a string',
  CONFIRM_PASSWORD_LENGTH_MUST_BE_FROM_6_TO_50: 'Confirm password length must be from 6 to 50',
  CONFIRM_PASSWORD_MUST_BE_STRONG:
    'Confirm password must be 6-50 characters long and contain at least 1 lowercase letter, 1 uppercase letter, 1 number, and 1 symbol',
  CONFIRM_PASSWORD_MUST_BE_THE_SAME_AS_PASSWORD: 'Confirm password must be the same as password',
  DATE_OF_BIRTH_MUST_BE_ISO8601: 'Date of birth must be ISO8601',
  GENDER_MUST_BE_ONE_OF_THE_FOLLOWING_VALUES: 'Gender must be one of the following values',
  USER_NOT_FOUND: 'User not found',
  LOGIN_SUCCESS: 'Login success',
  LOGOUT_SUCCESS: 'Logout success',
  REGISTER_SUCCESS: 'Register success',
  EMAIL_OR_PASSWORD_IS_INCORRECT: 'Email or password is incorrect',
  PHONE_OR_PASSWORD_IS_INCORRECT: 'Phone or password is incorrect',
  ACCESS_TOKEN_IS_REQUIRED: 'Access token is required',
  REFRESH_TOKEN_IS_REQUIRED: 'Refresh token is required',
  REFRESH_TOKEN_IS_INVALID: 'Refresh token is invalid',
  USED_REFRESH_TOKEN_OR_NOT_EXIST: 'Used refresh token or not exist',
  REFRESH_TOKEN_SUCCESS: 'Refresh token success',
  GET_PROFILE_SUCCESS: 'Get profile success',
  UPDATE_PROFILE_SUCCESS: 'Update profile success',
  NAME_LENGTH_MUST_BE_FROM_1_TO_50: 'Name length must be from 1 to 50',
  WEIGHT_MUST_BE_A_NUMBER: 'Weight must be a number',
  BLOOD_GROUP_MUST_BE_A_STRING: 'Blood group must be a string',
  AVATAR_MUST_BE_A_STRING: 'Avatar must be a string',
  AVATAR_LENGTH_MUST_BE_LESS_THAN_200: 'Avatar length must be less than 200',
  AVATAR_MUST_BE_A_URL: 'Avatar must be a URL',
  WEIGHT_MUST_BE_AN_INTEGER_BETWEEN_1_AND_500: 'Weight must be an integer between 1 and 500',
  OLD_PASSWORD_NOT_MATCH: 'Old password not match',
  CHANGE_PASSWORD_SUCCESS: 'Change password success',
  USER_NOT_AUTHORIZED: 'User not authorized',
  CITIZEN_ID_NUMBER_IS_REQUIRED: 'Citizen ID number is required',
  CITIZEN_ID_NUMBER_ALREADY_EXIST: 'Citizen already exists',
  CITIZEN_ID_MUST_BE_EXACTLY_12_DIGITS: 'Citizen ID must be exactly 12 digits',
  CITIZEN_ID_MUST_CONTAIN_ONLY_DIGITS_0_9: 'Citizen ID must contain only digits (0–9)',
  CITIZEN_ID_MUST_BE_A_STRING: 'Citizen ID must be a string',
  CITIZEN_ID_LENGTH_MUST_BE_12: 'Citizen ID length must be 12',
  GET_PROFILE_BY_CITIZEN_ID_NUMBER_SUCCESS: 'Get profile by citizen ID number success',
  GET_ALL_USERS_SUCCESS: 'Get all users success',
  ADDRESS_LENGTH_MUST_BE_LESS_THAN_200: 'Address length must be less than 200',
  ADDRESS_MUST_BE_A_STRING: 'Address must be a string',
  FULL_NAME_IS_REQUIRED: 'Full name is required'
} as const

export const BLOOD_MESSAGES = {
  CREATE_BLOOD_GROUP_SUCCESS: 'Create blood group success',
  BLOOD_GROUP_NOT_FOUND: 'Blood group not found',
  BLOOD_GROUP_ALREADY_EXIST: 'Blood group already exists',
  BLOOD_GROUP_MUST_BE_A_STRING: 'Blood group must be a string',
  BLOOD_GROUP_IS_REQUIRED: 'Blood group is required',
  BLOOD_GROUP_IS_INVALID: 'Blood group is invalid',
  GET_BLOOD_COMPONENTS_SUCCESS: 'Get blood components success',
  GET_BLOOD_GROUPS_SUCCESS: 'Get blood groups success',
  CREATE_BLOOD_COMPONENT_SUCCESS: 'Create blood component success',
  BLOOD_COMPONENT_NOT_FOUND: 'Blood component not found',
  BLOOD_COMPONENT_ALREADY_EXIST: 'Blood component already exists',
  BLOOD_COMPONENT_MUST_BE_A_STRING: 'Blood component must be a string',
  BLOOD_COMPONENT_IS_REQUIRED: 'Blood component is required',
  BLOOD_COMPONENT_IS_INVALID: 'Blood component is invalid',
  VOLUME_IS_REQUIRED: 'Volume is required',
  VOLUME_MUST_BE_A_NUMBER: 'Volume must be a number',
  VOLUME_MUST_BE_POSITIVE: 'Volume must be positive',
  GET_BLOOD_UNITS_SUCCESS: 'Get blood units success',
  GET_BLOOD_UNITS_FAIL: 'Get blood units fail',
  UPDATE_BLOOD_UNITS_SUCCESS: 'Update blood units success',
  UPDATE_BLOOD_UNITS_FAIL: 'Update blood units fail',
  BLOOD_UNIT_STATUS_IS_REQUIRED: 'Blood unit status is required',
  BLOOD_UNIT_STATUS_MUST_BE_A_STRING: 'Blood unit status status must be a string',
  BLOOD_UNIT_STATUS_MUST_BE_ONE_OF_THE_FOLLOWING_VALUES: 'Blood unit status must be one of the followings values',
  UPDATE_BLOOD_UNITS_STATUS_SUCCESS: 'Update blood units status success',
  BLOOD_UNIT_NOT_FOUND: 'Blood unit not found'
} as const

export const DONATION_MESSAGES = {
  CREATE_DONATION_REGISTRATION_SUCCESS: 'Create donation registration success',
  REGISTRATION_MUST_BE_A_STRING: 'Registration must be a string',
  REGISTRATION_IS_REQUIRED: 'Registration is required',
  REGISTRATION_IS_INVALID: 'Registration is invalid',
  USERID_IS_INVALID: 'Invalid user ID',
  GET_DONATION_REGISTRATIONS_SUCCESS: 'Get donation registrations success',
  GET_DONATION_REGISTRATION_SUCCESS: 'Get donation registration success',
  UPDATE_DONATION_REGISTRATION_SUCCESS: 'Update donation registration success',
  DELETE_DONATION_REGISTRATION_SUCCESS: 'Delete donation registration success',
  DONATION_REGISTRATION_NOT_FOUND: 'Donation registration not found',
  DONATION_PROCESS_NOT_FOUND: 'Donation process not found',
  DONATION_REGISTRATION_ID_INVALID: 'Invalid donation registration ID',
  GET_DONATION_REQUEST_PROCESS_SUCCESS: 'Get donation requests process success',
  DONATION_REQUEST_PROCESS_ID_INVALID: 'Invalid donation request process ID',
  UPDATE_DONATION_REQUEST_PROCESS_SUCCESS: 'Update donation request process success',
  START_DATE_DONATION_IS_INVALID: 'Start date donation is invalid',
  USER_ID_IS_REQUIRED: 'User ID is required',
  USER_ID_IS_INVALID: 'User ID is invalid',
  STATUS_IS_REQUIRED: 'Status is required',
  STATUS_IS_INVALID: 'Status is invalid',
  GET_ALL_DONATION_REGISTRATIONS_SUCCESS: 'Get all donation registrations success',
  STATUS_MUST_BE_A_STRING: 'Status must be a string',
  START_DATE_DONATION_IS_REQUIRED: 'Start date donation is required',
  GET_ALL_DONATION_REQUEST_PROCESS_SUCCESS: 'Get all donation requests process success',
  VOLUME_COLLECTED_IS_REQUIRED: 'Volume collected is required',
  VOLUME_COLLECTED_MUST_BE_A_NUMBER: 'Volume collected must be a number',
  VOLUME_COLLECTED_MUST_BE_POSITIVE: 'Volume collected must be positive',
  DONATION_DATE_IS_INVALID: 'Donation date is invalid',
  DESCRIPTION_MUST_BE_A_STRING: 'Description must be a string',
  DESCRIPTION_LENGTH_MUST_BE_LESS_THAN_500: 'Description length must be less than 500',
  BLOOD_DONATION_REQUEST_CANNOT_BE_APPROVED_IF_HEALTH_CHECK_RESULTS_ARE_NOT_SATISFACTORY:
    'Blood donation request cannot be approved if health check results are not satisfactory',
  GET_STATUS_DONATION_HEALTH_PROCESS_SUCCESS: 'Get status donation health process success',
  DONATION_TYPE_IS_REQUIRED: 'Donation type is required',
  DONATION_TYPE_IS_INVALID: 'Donation type is invalid',
  VOLUME_COLLECTED_MUST_BE_A_NUMBER_BETWEEN_250_AND_450: 'Volume collected must be a number between 250 and 450'
} as const

export const HEALTH_CHECK_MESSAGES = {
  GET_ALL_HEALTH_CHECKS_SUCCESS: 'Get all health checks success',
  GET_HEALTH_CHECK_SUCCESS: 'Get health check success',
  HEALTH_CHECK_NOT_FOUND: 'Health check not found',
  HEALTH_CHECK_ALREADY_EXIST: 'Health check already exists',
  HEALTH_CHECK_MUST_BE_A_STRING: 'Health check must be a string',
  HEALTH_CHECK_IS_REQUIRED: 'Health check is required',
  HEALTH_CHECK_IS_INVALID: 'Health check is invalid',
  CREATE_HEALTH_CHECK_SUCCESS: 'Create health check success',
  UPDATE_HEALTH_CHECK_SUCCESS: 'Update health check success',
  DELETE_HEALTH_CHECK_SUCCESS: 'Delete health check success',
  HEALTH_CHECK_ID_INVALID: 'Invalid health check ID',
  HEALTH_CHECK_NAME_IS_REQUIRED: 'Health check name is required',
  HEALTH_CHECK_NAME_MUST_BE_A_STRING: 'Health check name must be a string',
  HEALTH_CHECK_NAME_LENGTH_MUST_BE_LESS_THAN_100: 'Health check name length must be less than 100',
  HEALTH_CHECK_DESCRIPTION_MUST_BE_A_STRING: 'Health check description must be a string',
  HEALTH_CHECK_DESCRIPTION_LENGTH_MUST_BE_LESS_THAN_500: 'Health check description length must be less than 500',
  HEALTH_CHECK_STATUS_MUST_BE_A_STRING: 'Health check status must be a string',
  HEALTH_CHECK_STATUS_IS_REQUIRED: 'Health check status is required',
  HEALTH_CHECK_STATUS_MUST_BE_ONE_OF_THE_FOLLOWING_VALUES: 'Health check status must be one of the following values',
  HEALTH_CHECK_STATUS_VALUES: ['pending', 'in_progress', 'completed', 'failed'],
  GET_HEALTH_CHECK_BY_USER_ID_SUCCESS: 'Get health check by user ID success',
  GET_HEALTH_CHECK_BY_USER_ID_NOT_FOUND: 'Health check by user ID not found',
  WEIGHT_IS_REQUIRED: 'Weight is required',
  WEIGHT_MUST_BE_A_NUMBER: 'Weight must be a number',
  WEIGHT_MUST_BE_POSITIVE: 'Weight must be positive',
  TEMPERATURE_IS_REQUIRED: 'Temperature is required',
  TEMPERATURE_MUST_BE_POSITIVE: 'Temperature must be positive',
  TEMPERATURE_MUST_BE_A_NUMBER: 'Temperature must be a number',
  HEART_RATE_IS_REQUIRED: 'Heart rate is required',
  HEART_RATE_MUST_BE_POSITIVE: 'Heart rate must be positive',
  HEART_RATE_MUST_BE_A_NUMBER: 'Heart rate must be a number',
  DIASTOLIC_BLOOD_PRESSURE_IS_REQUIRED: 'Diastolic blood pressure is required',
  DIASTOLIC_BLOOD_PRESSURE_MUST_BE_POSITIVE: 'Diastolic blood pressure must be positive',
  DIASTOLIC_BLOOD_PRESSURE_MUST_BE_A_NUMBER: 'Diastolic blood pressure must be a number',
  SYSTOLIC_BLOOD_PRESSURE_IS_REQUIRED: 'Systolic blood pressure is required',
  SYSTOLIC_BLOOD_PRESSURE_MUST_BE_POSITIVE: 'Systolic blood pressure must be positive',
  SYSTOLIC_BLOOD_PRESSURE_MUST_BE_A_NUMBER: 'Systolic blood pressure must be a number',
  HEMOGLOBIN_IS_REQUIRED: 'Hemoglobin is required',
  HEMOGLOBIN_MUST_BE_POSITIVE: 'Hemoglobin must be positive',
  HEMOGLOBIN_MUST_BE_A_NUMBER: 'Hemoglobin must be a number',
  DESCRIPTION_MUST_BE_A_STRING: 'Description must be a string',
  DESCRIPTION_LENGTH_MUST_BE_LESS_THAN_500: 'Description length must be less than 500',
  UNDERLYING_CONDITIONS_MUST_BE_AN_ARRAY: 'Underlying health conditions must be an array',
  UNDERLYING_CONDITIONS_INVALID_VALUES: 'Underlying health conditions must contain valid values',
  THE_MINIUM_WEIGHT_REQUIRED_TO_DONATION_BLOOD_IS_42KG: 'The minimum weight required to donate blood is 42kg',
  UNABLE_TO_UPDATE_HEALTH_CHECK_NOT_CHECKED_IN: 'Unable to update health check because donor has not checked-in.',
  UNABLE_TO_UPDATE_HEALTH_CHECK_PENDING_REQUEST:
    'Unable to update health check because blood donation request is still pending.'
} as const

export const REQUEST_MESSAGES = {
  CREATE_REQUEST_REGISTRATION_SUCCESS: 'Create request registration success',
  UPDATE_REQUEST_REGISTRATION_SUCCESS: 'Update request registration success',
  RECEIVE_DATE_REQUEST_IS_REQUIRED: 'Receive date request is required',
  RECEIVE_DATE_REQUEST_IS_INVALID: 'Receive date request is invalid',
  IS_EMERGENCY_IS_REQUIRED: 'Is emergency is required',
  IS_EMERGENCY_IS_INVALID: 'Is emergency is invalid',
  STATUS_MUST_BE_A_STRING: 'Status must be a string',
  STATUS_IS_INVALID: 'Status is invalid',
  STATUS_IS_REQUIRED: 'Status is required',
  GET_REQUEST_REGISTRATION_BY_USER_SUCCESS: 'Get request registration by user success',
  GET_REQUEST_REGISTRATION_SUCCESS: 'Get request registration success',
  REQUEST_REGISTRATION_NOT_FOUND: 'Request registration not found',
  GET_REQUEST_PROCESS_SUCCESS: 'Get request process success',
  REQUEST_PROCESS_NOT_FOUND: 'Request process not found',
  UPDATE_REQUEST_PROCESS_SUCCESS: 'Update request process success',
  REQUEST_DATE_IS_REQUIRED: 'Request date is required',
  REQUEST_DATE_IS_INVALID: 'Request date is invalid',
  VOLUME_RECEIVED_MUST_BE_POSITIVE: 'Volume received must be positive',
  VOLUME_RECEIVED_MUST_BE_A_NUMBER: 'Volume received must be a number',
  GET_REQUEST_PROCESS_DETAIL_SUCCESS: 'Get request process detail success',
  REQUEST_PROCESS_DETAIL_NOT_FOUND: 'Request process detail not found',
  UPDATE_REQUEST_PROCESS_DETAIL_SUCCESS: 'Update request process detail success',
  GET_REQUEST_PROCESS_BLOOD_SUCCESS: 'Get request process blood success',
  REQUEST_PROCESS_BLOOD_NOT_FOUND: 'Request process blood not found',
  GET_STATUS_REQUEST_HEALTH_PROCESS_SUCCESS: 'Get status request health process success',
  REQUEST_TYPE_IS_REQUIRED: 'Request type is required',
  REQUEST_TYPE_IS_INVALID: 'Request type is invalid',
  REQUEST_TYPE_INVALID: 'Request type invalid',
  CONFIRM_REQUEST_PROCESS_BLOOD_SUCCESS: 'Confirm request process blood success',
  UPDATE_REQUEST_PROCESS_BLOOD_SUCCESS: 'Update request process blood success'
} as const

export const BLOG_MESSAGES = {
  CREATE_BLOG_SUCCESS: 'Create blog success',
  BLOG_NOT_FOUND: 'Blog not found',
  BLOG_ALREADY_EXIST: 'Blog already exists',
  BLOG_MUST_BE_A_STRING: 'Blog must be a string',
  BLOG_IS_REQUIRED: 'Blog is required',
  TITLE_IS_REQUIRED: 'Title is required',
  CONTENT_IS_REQUIRED: 'Content is required',
  IMAGE_IS_REQUIRED: 'Image is required',
  AUTHOR_IS_REQUIRED: 'Author is required',
  TITLE_MUST_BE_A_STRING: 'Title must be a string',
  CONTENT_MUST_BE_A_STRING: 'Content must be a string',
  IMAGE_MUST_BE_A_STRING: 'Image must be a string',
  AUTHOR_MUST_BE_A_STRING: 'Author must be a string',
  GET_ALL_BLOGS_SUCCESS: 'Get all blogs success',
  GET_BLOG_SUCCESS: 'Get blog success',
  UPDATE_BLOG_SUCCESS: 'Update blog success',
  DELETE_BLOG_SUCCESS: 'Delete blog success',
  IMAGE_MUST_BE_A_URL: 'Image must be a URL'
} as const

export const DASHBOARD_MESSAGES = {
  GET_ALL_REQUEST_NUMBER_SUCCESS: 'Get all request number success',
  GET_ALL_REQUEST_NUMBER_FAILED: 'Get all request number failed',
  GET_ALL_DONATION_NUMBER_SUCCESS: 'Get all donation number success',
  GET_ALL_DONATION_NUMBER_FAILED: 'Get all donation number failed',
  GET_ALL_USER_NUMBER_SUCCESS: 'Get all user number success',
  GET_ALL_USER_NUMBER_FAILED: 'Get all user number failed',
  GET_BLOOD_STOCK_SUMMARY_SUCCESS: 'Get blood stock summary success',
  GET_BLOOD_STOCK_SUMMARY_FAILED: 'Get blood stock summary failed'
} as const

export const NOTIFICATION_MESSAGES = {
  CHECKED_IN_DONATION_SUCCESS: 'Đã checked in hiến máu thành công!',
  CHECKED_IN_DONATION_BODY: 'Mời bạn đến địa điểm khám sáng lọc để kiểm tra sức khỏe trước khi hiến máu.',
  SUCCESSFULLY_DONATED_BLOOD: 'Hoàn thành hiến máu thành công!',
  MESSAGE_AFTER_SUCCESSFULLY_DONATED_BLOOD:
    'Cảm ơn bạn đã hiến máu! Vui lòng nghỉ ngơi đầy đủ, uống nhiều nước và tránh vận động mạnh trong 24 giờ tới. Chúng tôi kính chúc bạn sức khỏe dồi dào.',
  GET_NOTIFICATIONS_SUCCESS: 'Get notifications success',
  GET_NOTIFICATIONS_FAILED: 'Get notifications failed',
  MARK_NOTIFICATION_AS_READ_SUCCESS: 'Mark notification as read success',
  MARK_NOTIFICATION_AS_READ_FAILED: 'Mark notification as read failed'
} as const

export const LOCATION_MESSAGES = {
  FIND_COMPATIBLE_DONORS_NEARBY_SUCCESS: 'Find compatible donors nearby success',
  FIND_COMPATIBLE_DONORS_NEARBY_FAILED: 'Find compatible donors nearby failed',
  RADIUS_KM_IS_REQUIRED: 'Radius in kilometers is required',
  RADIUS_KM_MUST_BE_A_NUMBER: 'Radius in kilometers must be a number',
  RADIUS_KM_MUST_BE_POSITIVE: 'Radius in kilometers must be positive',
  BLOOD_GROUP_NAME_MUST_BE_A_STRING: 'Blood group name must be a string',
  BLOOD_GROUP_NAME_LENGTH_MUST_BE_LESS_THAN_50: 'Blood group name length must be less than 50'
} as const
